--[[

    AckAbility: the toolkit that abuses Ability for client-to-server communications
    =========================================================================

    Core can *unreliably* replicate AbilityTarget several times a second.
    AbilityTarget (in this implementation) can hold 4-byte integer (`header`)
    and up to 27-byte string (`data`). Another 3 bytes were used for
    error detection (CRC, data length).

    The main reason for all these complexities is to *acknowledge* incoming
    packets to the server - hence the name. Acknowledging via `Events` will
    be sent too rarely and will exhaust the already very small rate limit.
    As a bonus, we can send some messages to the server via `data`.

    How to abuse Ability:
    * Client:
        - ability.castEvent:Connect(ability -> AckAbility.write(ability, header, data))
        - ability:Activate()
        - ability:Interrupt()
    * Server:
        - ability.readyEvent:Connect(ability -> AckAbility.read(ability))

    (!) Other ways will not work or will interfere with other
        abilities or even with Core modals (like mounts).
    (!) The `Interrupt` should immediately follow `Activate` (no waiting).
    (!) Don't forget to turn off `AbilityPhaseSettings.isTargetDataUpdated`.
    (!) The code was written with little-endian computer architecture in mind.

    Copyright (C) 2021 Andrew Zhilin (https://github.com/zoon)
    This is free and unencumbered software released into the public domain.
]]

local ipairs, print, pcall, type, select = ipairs, print, pcall, type, select
local assert, error = assert, error
local pack, unpack, byte, char = string.pack, string.unpack, string.byte, string.char
local mtype, random = math.type, math.random
local tunpack = table.unpack

-- Core
local CORE_ENV = CoreDebug and true
local CHECK_FACING_MODE = AbilityFacingMode and AbilityFacingMode.NONE
local Vector3, Rotation = Vector3, Rotation

-- just a module, not a metatable
local AckAbility = {}

_ENV = nil

local PHASE_SETTINGS = {
    "castPhaseSettings",
    "executePhaseSettings",
    "recoveryPhaseSettings",
    "cooldownPhaseSettings"
}

-- set exponent part to always be finite, normalized float
local F32_PADDING_BYTE = 0x40

-- locations in `AbilityTarget` where we will store our bytes
-- NOTE: the code can also use `Rotation`, but it looks like the user-set
-- `OwnerMovementRotation` is not replicated on the server.

local DATA_VECTORS = {
    "AimPosition",
    "AimDirection",
    "HitPosition"
}

---------------------------------------
-- CRC-8
---------------------------------------
--[[
    crc8smbus (aka crc-8, crc-8-ccitt)
    -- generated by `crcany` (https://github.com/madler/crcany)
    -- ported to Lua 5.3 by Andrew Zhilin (https://github.com/zoon)
]]
-- LuaFormatter off
local crc8 do

    local table_bytes = {[0]=
        0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24,
        0x23, 0x2a, 0x2d, 0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f,
        0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d, 0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2,
        0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd, 0x90, 0x97, 0x9e, 0x99,
        0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd, 0xc7,
        0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4,
        0xed, 0xea, 0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81,
        0x86, 0x93, 0x94, 0x9d, 0x9a, 0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32,
        0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a, 0x57, 0x50, 0x59, 0x5e, 0x4b,
        0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a, 0x89, 0x8e,
        0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3,
        0xa4, 0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8,
        0xdd, 0xda, 0xd3, 0xd4, 0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51,
        0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44, 0x19, 0x1e, 0x17, 0x10, 0x05, 0x02,
        0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34, 0x4e, 0x49, 0x40,
        0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
        0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a,
        0x1d, 0x14, 0x13, 0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91,
        0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83, 0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc,
        0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
    }
    -- @ crc8 :: data:str|int32|nil -> uint8
    -- returns the CRC of string or 32-bit integer, applied to the previous
    -- CRC value, crc. If `data` is nil, then the other argument is
    -- ignored, and the initial CRC (CRC of zero bytes) is returned.
    crc8 = function(data, crc)
        local INITIAL_CRC = 0x00
        if data == nil then return INITIAL_CRC end
        crc = crc or INITIAL_CRC
        assert(crc == (crc & 0xff), "`crc` should be `uint8`")
        -- int32 or uint32
        if mtype(data) == "integer" and data >= -0x80000000 and data <= 0xffffffff then
            crc = table_bytes[crc ~ (data >> 24 & 0xff)]
            crc = table_bytes[crc ~ (data >> 16 & 0xff)]
            crc = table_bytes[crc ~ (data >> 8 & 0xff)]
            crc = table_bytes[crc ~ (data & 0xff)]
            return crc
        end
        if type(data) == "string" then
            for i = 1, #data do
                crc = table_bytes[crc ~ byte(data, i)]
            end
            return crc
        end
        error("arg should be 32-bit integer or string")
    end
end
-- LuaFormatter on

---------------------------------------
-- Utils and data accessors
---------------------------------------

-- getters and setters for property vectors and rotations
local XYZ_GETTERS, XYZ_SETTERS, MAX_DATA_BYTES
do
    XYZ_GETTERS, XYZ_SETTERS = {}, {}
    for i, prop in ipairs(DATA_VECTORS) do
        if not CORE_ENV then
            break
        end
        local getter = "Get" .. prop
        local setter = "Set" .. prop
        local ctor = prop:find("Rotation") and Rotation.New or Vector3.New
        XYZ_GETTERS[i] = function(target)
            local v3 = target[getter](target)
            return v3.x, v3.y, v3.z
        end
        XYZ_SETTERS[i] = function(target, x, y, z)
            target[setter](target, ctor(x, y, z))
        end
    end
    -- bytes: 3 per float, floats: 3 per vector or rotation
    MAX_DATA_BYTES = 3 * 3 * #DATA_VECTORS
end

-- @ float_to_bytes :: float32 -> b0:byte, b1:byte, b2:byte | false
-- extracts 3 bytes from float 32
local function float_to_bytes(float32)
    assert(mtype(float32), "argument should be a number")
    local b0, b1, b2, b3, _ = unpack("BBBB", pack("f", float32))
    -- one more check against garbage in data
    if b3 ~= F32_PADDING_BYTE then
        return false
    end
    return b0, b1, b2
end

local function is_byte(x)
    return mtype(x) == "integer" and x == (x & 0xff)
end

-- @ bytes_to_float :: b0:byte, b1:byte, b2:byte -> float32
-- packs 3 bytes to float32, replace absent args to 0
local function bytes_to_float(b0, b1, b2)
    b0, b1, b2 = b0 or 0, b1 or 0, b2 or 0
    assert(is_byte(b0) and is_byte(b1) and is_byte(b2), "arguments should be bytes or nils")
    local float32, _ = unpack("f", pack("BBBB", b0, b1, b2, F32_PADDING_BYTE))
    return float32
end

-- @ append :: array, max:int, values... -> true | false
-- appends *non-falsy* values to array until #array <= max
local function append(array, max, ...)
    if #array >= max then
        return true
    end
    local n = select("#", ...)
    local i = 1
    while #array < max and i <= n do
        local value = select(i, ...)
        if not value then
            return false
        end
        array[#array + 1] = value
        i = i + 1
    end
    return true
end

---------------------------------------
-- Public interface
---------------------------------------

-- @ check :: ability -> "ok" | error
-- checks the ability settings for compliance with our requirements
function AckAbility.check(ability)
    assert(ability and ability.type == "Ability")
    assert(ability.canBePrevented)
    -- "nil" string: not a typo, merely a weird value for `NONE` action binding
    assert(not ability.actionBinding or ability.actionBinding == "nil")
    for _, phase in ipairs(PHASE_SETTINGS) do
        local setting = ability[phase]
        if phase:find("cast") then
            -- not sure if it's a necessary condition, but let it be
            assert(setting.duration >= 0.1)
        end
        assert(not setting.preventsOtherAbilities)
        assert(setting.facingMode == CHECK_FACING_MODE)
        assert(setting.canMove and setting.canJump and setting.canRotate)
    end
    return "ok"
end

-- @ read :: ability -> header:int32, data:str | false, err
-- reads header:int32 and up to MAX_DATA_BYTES `data` from AbilityTarget
function AckAbility.read(ability)
    assert(ability and ability.type == "Ability")
    local target = ability:GetTargetData()
    local header = target.spreadRandomSeed
    local header_crc, data_crc, nbytes = float_to_bytes(target.spreadHalfAngle)
    -- check header crc
    if not header_crc or crc8(header) ~= header_crc then
        return false, "crc error (header)"
    end
    local data = ""
    if nbytes > 0 then
        local out = {}
        local ok = true
        for _, getter in ipairs(XYZ_GETTERS) do
            local x, y, z = getter(target)
            ok = ok and append(out, nbytes, float_to_bytes(x))
            ok = ok and append(out, nbytes, float_to_bytes(y))
            ok = ok and append(out, nbytes, float_to_bytes(z))
            if #out == nbytes then
                break -- we're done
            end
        end
        if not ok then
            return false, "read float error (xyz)"
        end
        data = char(tunpack(out))
        if crc8(data) ~= data_crc then
            return false, "crc error (data)"
        end
    end
    return header, data
end

-- @ write :: ability, header:int32, data:str ^-> nil
-- writes header:int32 and up to MAX_DATA_BYTES `data` to AbilityTarget
function AckAbility.write(ability, header, data)
    data = data or ""
    assert(ability and ability.type == "Ability", "first argument should be `Ability`")
    assert(mtype(data) == "integer" and data >= -0x80000000 and data <= 0xffffffff,
        "header should be 32-bit integer")
    assert(data and type(data) == "string", "data should be a `string`")
    assert(#data <= MAX_DATA_BYTES, "data length exceeds MAX_DATA_BYTES")
    local target = ability:GetTargetData()
    local header_crc = crc8(header)
    local data_crc = crc8(data)
    target.spreadRandomSeed = header
    target.spreadHalfAngle = bytes_to_float(header_crc, data_crc, #data)
    if #data > 0 then
        local i = 1
        for _, setter in ipairs(XYZ_SETTERS) do
            -- For simplicity, we will always write the whole vector (0-padded).
            local x = bytes_to_float(byte(data, i, i + 2))
            i = i + 3
            local y = bytes_to_float(byte(data, i, i + 2))
            i = i + 3
            local z = bytes_to_float(byte(data, i, i + 2))
            i = i + 3
            setter(target, x, y, z)
            if i > #data then
                break
            end
        end
    end
    ability:SetTargetData(target)
end

---------------------------------------
-- Tests
---------------------------------------
local function test_crc8()
    assert(crc8("123456789") == 0xF4)
    assert(crc8(0xFABAABBA) == 0x52)
    -- int32 -> uint32 conversion
    assert(crc8(-0x80000000) == crc8(0x80000000))

    print("  test_crc8 -- ok")
end

local function test_append()
    -- @ append :: array, max:int, values... -> true | false
    local ok = false
    local a = {}
    ok = append(a, 1, 11, 22, 33)
    assert(ok)
    assert(#a == 1, "" .. #a)
    assert(a[1] == 11)
    ok = append(a, 5, 22, 33)
    assert(ok)
    assert(#a == 3)
    assert(a[2] == 22 and a[3] == 33)

    local b = {}
    ok = append(b, 1, 11, nil, 33)
    assert(ok)
    assert(#b == 1)
    assert(b[1] == 11)
    ok = append(b, 5, 22, nil, 44)
    assert(not ok)
    assert(#b == 2)
    assert(b[2] == 22)

    local c = {}
    ok = append(c, 5, false)
    assert(not ok)
    assert(#c == 0)
    ok = append(c, 5, nil)
    assert(not ok)
    assert(#c == 0)
    ok = append(c, 5)
    assert(ok) -- (!) select("#", ...) == 0
    assert(#c == 0)

    print("  test_append -- ok")
end

local function test_byte_float_conversions()

    local data = {
        {0x00, 0x00, 0x00},
        {0xff, 0xff, 0xff},
        {nil, nil, nil},
        {nil, 0xff, 0xff},
        {0xff, nil, 0xff},
        {0xff, 0xff, nil}
    }
    for _ = 1, 100 do
        data[#data + 1] = {random(0, 255), random(0, 255), random(0, 255)}
    end

    local f = nil
    for _, bytes in ipairs(data) do
        f = bytes_to_float(tunpack(bytes))
        local b0, b1, b2 = float_to_bytes(f)
        assert(b0 == (bytes[1] ~= nil and bytes[1] or 0))
        assert(b1 == (bytes[2] ~= nil and bytes[2] or 0))
        assert(b2 == (bytes[3] ~= nil and bytes[3] or 0))
    end

    f = bytes_to_float(byte("1", 2, 5))
    assert(float_to_bytes(f) == 0)

    f = bytes_to_float(byte("1", 1, 3))
    assert(float_to_bytes(f) == 0x31)

    assert(not pcall(float_to_bytes, "not a number"))

    print("  test_byte_float_conversions -- ok")
end

local function test()
    print("[ack ability]")
    test_crc8()
    test_append()
    test_byte_float_conversions()
end
test()

-- module
AckAbility.HEADER_BYTES = 4
AckAbility.MAX_DATA_BYTES = MAX_DATA_BYTES
AckAbility.crc8 = crc8

return AckAbility
